
C#

 C#, é uma linguagem de programação, criada pela Microsoft.
É usada principalmente no desenvolvimento de softwares para Deskop,
e apesar de não ser muito utilizada, entra em diversos conceitos e
áreas da programaçã, inclusive no desenvolvimento web, como o de ASP.NET.

			Setor A: Criando_OProjeto;

 Em C#, e possível desenvolver programas por meio do Console, e por meio
dos chamados "formulários", que são aplicativos com interfaces que podemos criar em
praticamente todo editor que suporte a linguagem.

 Antes de começarmos, é necessário que você instale alguma IDE que te auxilie na edição
dos códigos. É recomendado o uso do Viual Studio, com sua versão mais atualizada. 
 Porém, devido ao seu alto consumo de Hardware e memória, recomendo que faça a instalação do
SharpDevelop, uma ferramenta muito parecida com o VisualStudio, porém com menos funções, contendo
apenas o essencial.

 Agora visto isso, primeiro focaremos no desenvolvimento no Console. Quando criamos algum projeto
em C#,por padrão recebemos este código:

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;

	namespace nomeDoSeuProjetoAqui
	{
    	class Program
    	{
        	static void Main(string[] args)
        	{

        	}
    	}
	}

 Não se assuste! Isso são apenas informações básicas que o computador precisa entender para desenvolver o programa!
 Essas informações são como a base do cérebro do computador.
	
	1: using: Seguindo as linhas respectivamente, 			2: namespace: Sinaliza qual programa está
	vemos primeiro "using". Este comando se refere			aberto no editor. Apesar de não ser tão relevante,
	às bibliotecas que o computador está utilizando 		NÃO DEVE SER APAGADO.
	para entender o que está sendo escrito no código. 
	Quase como um dicionário.

	3: class: Informa qual o tipo do projeto.			3: static void blah blah blah: É onde escrevemos o
									código em si.

 Observe que cada um desses métodos acima, recebe um par de chaves, qua abrem e fecham. Isso sinaliza onde o código se inicia, e onde
termina. No caso, para digitarmos qualquer código, devemos escrever dentro das chaves de "static void", isso inclui todo e qualquer
comando que escrevermos nese documento. Quando não for o caso, sinalizaremos.

 Agora, com tudo isso em mente, iremos escrever a nossa primeira mensagem no console.

 Usando os comandos:

 "Console.WriteLine("Sua Mensagem aqui");", e "Console.ReadLine();"

 Console.WriteLine - Manda o programa digitar uma mensagem e pular uma linha, caso o usuário deseje inserir outros dados no console.

 Console.ReadLine - Manda o programa não fechar a janela do console automaticamente. Sem isso, não conseguiremos nem ler a mensagem de
 Console.WriteLine.

 No caso, o código ficaria assim:

using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;

	namespace nomeDoSeuProjetoAqui
	{
    	class Program
    	{
        	static void Main(string[] args)
        	{

			Console.WriteLine("Olá humano!");
			Console.ReadLine();

        	}
    	}
	}

-Repare que os códigos sempre recebem um ";" (ponto e vírgula) no fim. Este é um elemento vital para o programa em C#, por isso, sempre
confirme se foi inserido ou não.

			Seção A.3: Tipos de dados e visualização deles;

 Já sabemos como exibir algo no console. Agora, precisamos saber como determinar o tipo destes dados. Toda linguagem de programação
determina o tipo de seus dados inseridos, seja texto, numérico (decimal  e inteiro), ou até valores booleanos, que recebem a resposta
de Verdadeiro, ou Falso (True, False respectivamente).

 Em C#, os dados são denominados da seguinte forma:
				     _________________________________________
 -----------------------------------[_________________________________________]----------------------------------------------------------------------

 int = Recebe apenas NÚMEROS INTEIROS.				   	 float/double/decimal = Recebe apenas NÚMEROS DECIMAIS, isto é, números 
								   	 "com vírgula". A diferença é que, float armazena menos dados que double,
 string = Recebe APENAS TEXTO, este que, deve ser inserido	   	 e decimal é muito "mais preciso" com os dados inseridos nas variáveis.
 entre áspas ("").
 								    	bool = Recebe apenas dois tipos de valores, True e False, 
 char = Também recebe APENAS TEXTO, porém, por exemplo,		    	como dito anteriormente. É muito usado para "validar" dados, por exemplo:
 "Se variável x receber o valor de 10, ela será capaz de	    	a variável "masculino" é True, se o usuário for feminino, caso contrário,
 armazenar um caractere, ou seja, apenas uma letra, ou um  	    	false.
 número. Ao contrário de string, deve receber seus dados
 em áspas simples ('').


 Variáveis devem sempre ser inicializadas, isso significa que, devem receber um valor quando forem declaradas. Declarar uma variável, é
justamente denominar o tipo dela, e uma variável, é uma ferramenta com um nome dado por nós mesmos, que irá armazenar um determinado dado.

	a)String:

 string nomeGenerico1 = "";

	b)int

 int nomeGenerico2;

	c)float

 float nomeGenerico3 = 20.74; / double nomeGenerico4 = 9.783;

	d)bool

 bool nomeGenericoT = True,nomeGenericoF = False;

 Caso haja a declaração de outras variáveis do mesmo tipo, é só adicionar uma vírgula entre o dado e a nova variável, como vemos acima.
 O dado da variável não precisa obrigatóriamente ser atribuido na declaração. A variável pode receber o valor no meio do código do programa.
 Vejamos o exemplo da letra b) (int).

 nomeGenerico = 35;

 Ok, visto que já temos as variáveis, podemos imprimir seus dados no console com o comando que vimos antes, Console.WriteLine. No caso,
 usaremos nomeGenerico4.

 Console.WriteLine(nomeGenerico4);

 Caso tenha declarado as variáveis da mesma forma, o console deve imprimir o valor da variável (9.783)
 Podemos também misturar textos aos valores das variáveis:

 Console.WriteLine("O valor de nomeGenerico4, é " + nomeGenerico4);

 Agora, perceba que o sinal de soma (+), não é usado para diretamente somar algo. Isso se deve por que o computador não identificou que
 o sinal está agregado a uma operação matemática. Caso esteja, será de fato realizada a soma:

 float Quoc;
 float varEx = 10.10, aux = 20.20;

 Quoc = varEx + aux;

 Console.WriteLine(Quoc);

 No caso, será impresso no console a soma das duas variáveis decimais. Lembre-se, sempre que formos adicionar elementos aos parêntesis,
precisamos adicionar o sinal de + entre os elementos, que aqui, chamamos de "concatenação".

 Caso mudemos o valor das variáveis em sua declaração, o resultado que obtemos no console também é diferente,  mostrando
os dados novos ao invés dos antigos. podemos mudar o valor das variáveis assim:

 string suaVarAqui = "Olá eu sou um texto!"

 suaVarAqui = "Eu estou com fome, me alimente humano!"; //Este novo valor atribuído é considerado absoluto, e é o novo valor da variável.



				Setor A.5 = Comentários

 Já dizia um sábio, "Um código bem comentado é um código bem escrito.".
 Bem, se realmente foi um sábio eu não sei, mas de fato, é uma frase importante.

 Comentários estão por toda parte, em praticamente todo tipo de código de software. Eles ajudam (e muito) os desenvolvedores a entenderem
mesmo depois de anos sem alterar o programa, a saberem como funcionam.

 Veja, comentário é uma forma muito... "elegante" de se descrever, pois são uma espécie de anotação que pode ser alterada a qualquer momento.

 Os comentários são diferentes em cada tipo de linguagem de programação, por exemplo em Python, que usamos a '#' para comentar uma linha.
 Porém aqui em C#, os cometários são da forma que foi escrita antes do início deste setor. Devemos sempre inserir as barras duplas (//),
para que o programa entenda que aquela linha se trata de uma anotação do desevolvedor, e não uma linha de código. E não, o programa não
lê a linha comentada. Imagine as barras duplas como uma placa de contra-mão, que diz para onde ir, e onde não ir.

 //Comenta apenas uma linha

 /* Comenta
 Diversas
 Linhas
 Mas
 deve
 ser
 fechado
 por: */

				Setor B = Atributos;

	ATENÇÃO: ESTE TÓPICO ESTÁ ATUALMENTE INCOMPLETO E PODE SER ATUALIZADO CONSTANTEMENTE.

 
