|Python|

#######################
!!!!!IMPORTANTE!!!!!!!!
#######################

 Antes de começar a desenvolver qualquer programa/aplicação em
python, por favor, realize o Download da linguagem em python.org.

 O Download só é obrigatório para usuários do Microsoft Windows, já que
no MacOS, Linux e outros, a linguagem já é imbutida no sistema do SO¹,
mas caso você seja um usuário de MacOS, e queira atualizar ou reinstalar
o python, apenas repita os mesmos passos.

 Já para os usuários Linux, abra o cmd, e digite "sudo apt-get install python3.9²".

 Em alguns casos, pode ser que seja necessário um "apt-get" para a instalação do IDLE,
mas isso varia de cada versão de Linux.

¹Sistema operacional
²A versão 3.9, é considerada a mais atual até o registro deste commit. Caso ela
não seja a mais atual no seu caso, apenas mude o número da versão depois de "python".

========================================================================

				SUMÁRIO:

1 - Executando o python no prompt

2 - Comandos em Python.

3 - Operações numéricas em Python

-------------------------------------------------------------------------
  	  ______
	 |Python|
		 _______
		|CONSOLE|
---------------------------------------------------------------------------
	 	 	  ______________________________________
			 |					|
			 |	Executar o python em cmd:	|
			 |______________________________________|

 Abra o cmd/Prompt do seu SO, e digite "python".

 Pronto, você já pode codificar em python.

 Caso você queira usar um programa que tem um visual melhor para a codificação de python,
é recomendado que você use o IDLE, um programa que já é instalado junto ao python quando
feito o download pela internet.

 Para utilizar o IDLE, apenas pesquise por "IDLE" no menu iniciar.

 Há outros editores de python que também podem ser baixados, mas eu recomendo o uso do
Pycharm, devido à sua praticidade e design, apesar de ser um pouco mais pesado.

 Caso seu computador não seja tão potente, recomendo prosseguir com o uso do IDLE.
|____________________________________________________________________________| 
|============================================================================|
|----------------------------------------------------------------------------|

				PYTHON ZEN -

 A linguagem Python foi escrita com base em certos fundamentos que podem ser
acessados no cmd ou no prórpio prompt do seu SO.

 Basta digitar "import this", e será exibida a seguinte lista:

>>>import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly. - Bonito é melhor que feio.

Explicit is better than implicit. - Explícito é melhor que implícito.

Simple is better than complex. - Simples é melhor que complexo.

Complex is better than complicated. - Complexo é melhor que complicado.

Flat is better than nested. - Plano é melhor do que aninhado.

Sparse is better than dense. - Disperso é melhor do que denso.

Readability counts. - Contagens de legibilidade

Special cases aren't special enough to break the rules. - Casos especiais não são
especiais o suficiente para quebrar as regras.

Although practicality beats purity. - De qualquer forma, praticidade "derrota" a pureza.

Errors should never pass silently. - Erros nunca devem passar silenciosamente./Erros nunca devem
passar despercebidos.

Unless explicitly silenced. - Ao menos explicitamente silenciados (Referente à linha anterior).

In the face of ambiguity, refuse the temptation to guess. - Diante da ambigüidade, recuse a tentação
de adivinhar

There should be one-- and preferably only one --obvious way to do it. - Deve haver apenas um(a) --
e de preferência apenas um(a)--forma óbvio(a) de fazer/realizar isso.

Although that way may not be obvious at first unless you're Dutch. - De qualquer forma, aquele jeito
pode não parecer o mais óbvio de primeira, a menos que você seja Holandês.

Now is better than never. - Agora é melhor do que nunca.

Although never is often better than *right* now. - De qualquer forma, "nunca" é muito melhor do que
"agora mesmo"/"de imediato".

If the implementation is hard to explain, it's a bad idea. - Se sua implementação é difícil de
explicar, então é uma má ideia.

If the implementation is easy to explain, it may be a good idea. - Se a implementação é fácil de explicar,
então é uma boa ideia.

Namespaces are one honking great idea -- let's do more of those! - Os namespaces* são uma ótima ideia.
vamos fazer mais disso!

*Um namespace é uma parte que é possível armazenar nomes, termos técnicos e muitas outras coisas.

|--------------------------------------------------------------------------------------------------------|
|========================================================================================================|
|________________________________________________________________________________________________________|

					 _______________________________
					|			   	|
					|	COMANDOS EM PYTHON!	|
					|_______________________________|

_________________________________________________________________________________________________________

>>>print

 O comando print, é responsável por fazer com que o console "imprima" uma determinada mensagem:

CONSOLE:
print("Mensagem aqui")
Mensagem aqui

OU

>>>print('Mensagem aqui')
Mensagem aqui

--------------------------------------------------------------------------------------------------------
 _______
|	|
|Sinais:|
|_______|

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 _
	|+|

 O caractére "+" (mais), é usado em python como uma ponte entre dois elementos. Ou seja, é ele que realiza a fusão
entre duas informações digitadas por um usuário.

exemplo:

>>>print('Olá ' + 'humano.')
Olá humano.

==================================================================================================================
	 _
	|=|

 O caráctere "=" (igual), é usado para definir que um determinado dado/varivel recebe um valor ou algo do genero.

Exemplo:

Var1 = Var2

 No caso, a variável 1 irá receber o valor introduzido na variável 2.

Mais exemplo:

*Nome = Pmguim
Idade = 577
Peso = 1g

*A variável nome receberá o dado inserido pelo usuário, assim como todas as outras.

_______________________________________________________________________________________________________________

 _______________________________
|				|
|	Uso de variáveis	|
|_______________________________|

 As variáveis podem ser simplesmente escritas como usamos o exemplo de nome, idade e peso. Mas, se escrevermos
elas daquela forma, elas não serão imprimidas no programa. Para que sejam, devemos escrever:

>>>print (Nome)
Pmguim

 Para que o programa imprima mais de uma variável, é necessário utilizar a "," (vírgula)! Ela realizara uma
espécie de separação dos dados, porém ainda sim, juntando eles. Mas lembre-se, a vírgula NÃO É IGUAL AO "+" (mais).

>>>print (Nome, Idade, Peso)
Pmguim 577 1

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

 _______
|	|
|Input	|
|_______|

 O elemento "input", é responsável por receber e mostrar o resultado de uma variável. Pode parecer um pouco
confuso, mas é bem simples:

>>>Nome = input('Qual é o seu nome? ')
Qual é o seu nome? Pmguim

 Depois que o usuário inserir seu nome, o input armazenará o dado na variável Nome, e caso seja digitado
print, será imprimido o dado anteriormente inserido na variável.

>>>print(Nome)
Pmguim

IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
 _______________________________
|				|
|	Tipos Primitivos	|
|_______________________________|

 Os tipos primitivos são declarações de variáveis, que são usadas para determinar o valor das mesmas.
Usando eles, podemos somar dois valores inseridos por um usuário e fazer muito mais.

Existem 4 tipos de Tipos Primitivos, são eles:

int - se refere à um número inteiro (sem vírgula ou ponto)

float - Referente à valores reais (com vírgula ou ponto)

bool - Referente á valores lógicos (True ou False(Verdadeiro ou falso))

str - Referente á qualquer caractére (letras, símbolos e etc.)

===============================================================

 Para usar os valores, devemos inseri-los entre o '=' (igual) e o dado recebido pela string.

 Suponhamos que estejamos fazendo um programa que realize a soma de duas variáveis. Devemos então:

DOCUMENTO PY:

print('Olá humano!')

Valor1 = int(input('Insira o primeiro valor: '))
Valor2 = int(input('Insira o segundo valor: '))

Quoc* = Valor1 + Valor2

print('A soma dos valores é:' + Quoc)

CONSOLE:

Olá humano!

Insira o primeiro valor: wx
Insira o segundo valor: xy

A soma dos valores é: wxxy

 Também é possível saber qual o tipo de declaração que a variável recebeu. Basta abrir um parên-
tesis em 'print', e escrever 'type'. Logo após, escreva a mensagem + a variável.

 Pode parecer bem confuso, por isso, é melhor realizar de forma prática esta última.

*Para que o programa realize a soma das variáveis, é necessário fazer com que outra variável receba
o valor da soma entre eles.

§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§

 _______________________
|			|
|	.is		|
|_______________________|

 Esta ramificação, é usada quando a variável recebe a declaração 'bool'. 'bool', que no caso só recebe
os valores 'True' ou 'False'. A ramificação '.is', é usada para determinar ao programa se a variável
receberá um valor numérico, decimal, ou qualquer outro. No caso então, temos:

.isnumeric
.isdecimal
.isdigit
.isprintable
.istitle

 Entre outros.

 '.is', deve ser adicionado dentro do elemento 'print', e deve acompanhar o nome de uma determinada variável.

print(var.isnumeric)
-------------------------------------------------------------------------------------------------------------

 _______________________
|			|
|	.format		|
|_______________________|

 Também há uma adição que pode ser feita ao comando print, para que não tenha que usar
tantas aspas, e tantos sinais de adição. O elemento '.format', deve ser adicionado depois da mensagem escrita em 'print'.

 Antes, vamos falar sobre o print. Para utilizar o .format, não é necessário utilizar ',' ou '+' dentro de print.
 Primeiro, precisamos, óbviamente escrever a mensagem.

Valor1 = int(input('Insira o primeiro valor: ')
Valor2 = int(input('Insira o segundo valor: ')

Quoc = Valor1 + Valor2

print('A soma entre {} e {}, é {}').format(Valor1,Valor2,Quoc)

 Caso você não tenha entendido, as chaves escritas na mensagem de print, são referentes às variáveis escritas respectivamente
no '.format'. Então, Valor1 é referente à primeira chave, Valor2 é referente à segunda, e Quoc é referente à terceira.

(((Operações)))

 Também é possível realizar operações numéricas em .format, MAS, SÓ SE, E APENAS SE, o objetivo do programa for
imprimir o resultado/valor de uma variável.

 Suponhamos que eu queira fazer um programa que mostre o sucessor e o antecessor de um determinado valor. Fariamos então:

print('Olá humano!')

Valor1 = int(input('Insira um valor: '))
Ant = Valor1 - 1
Suc = Valor1 + 1
print('Baseado no valor {}, o antecessor é {} e o sucessor é {}'.format(Valor1, Ant, Suc))
====================================================================================================

Porém, podemos eliminar as variáveis 'Ant', e 'Suc', e substituí-las por duas operações de subtração:

print('Olá humano!')
Valor1 = int(input('Insira um valor: '))
print('Baseado no valor {}, o antecessor é {} e o sucessor é {}'.format(Valor1, (Valor1-1), (Valor1+1)))

____________________________________________________________________________________________________________________________
 _______________________________
|				|
|	Uso das chaves		|
|_______________________________|

 Também há mais elementos que podem ser usados dentro das chaves. Ainda é necessário o uso do '.format' para que sejam
identificados os elementos que compõem as chaves.

 Alguns elementos são:

> - Alinha o conteúdo da variável à direita.¹				:Número - No caso, inserimos algum número. Isso
									indicará quantos espaços serão dados entre o valor
< - Alinha o conteúdo da variável à esquerda.²				da variável e a mensagem em 'print'.*

^ - Centraliza o conteúdo da variável.³					Caractere - Adiciona algum caractere entre
									o valor da variável e a mensagem de print.#

						:.Númerof -
				Caso a vaiável seja um valor float, será mostrado
				apenas um determinado número de casas decimais do
				valor.--

============================================================================================================================

						LEGENDA:

¹									²
Nome = input('Qual é o seu nome?')					Nome = input('Qual é o seu nome?')
print('Seu nome é {:>5}!'.format(Nome)					print('Seu nome é {:<10}!'.format(Nome)

CONSOLE:								CONSOLE:
Qual é o seu nome? Pmguim						Qual é o seu nome? Pmguim
Seu nome é     Pmguim!							Seu nome é Pmguim          !
___________________________________
									*
³									Nome = input('Qual é o seu nome?')
Nome = input('Qual é o seu nome?')					print('Seu nome é {:20}!'.format(Nome)				
print('Seu nome é {^:10}!'.format(Nome)
									CONSOLE:
CONSOLE:								Qual é o seu nome? Pmguim
Qual é o seu nome? Pmguim						Seu nome é                    Pmguim!
Seu nome é     Pmguim     !
____________________________________					_______________________________________

#									--
Nome = input('Qual é o seu nome?')					Valor1 = float(input('Digite um número: '))
print('Seu nome é {:=20}'.format(Nome)					print('O valor digitado é: {:.2f}'.format(Valor1)
									
CONSOLE:								CONSOLE:
Qual é o seu nome? Pmguim						Digite um número: 3,141592654
Seu nome é ==========Pmguim==========					O valor digitado é 3,14
______________________________________________________________________________________________________________________________

 _______________
|		|
|	End	|
|_______________|

 O elemento end='', deve se,pre ser adicionado no fim de 'print'. Ele tem como objetivo, evitar a quebra de linha entre
o prórpio print e outro elemento.

print('Olá Humano!', end ' ')
Nome = input('Qual é o seu nome?')

CONSOLE:

Olá Humano! Qual é o seu nome?
______________________________________________________________________________________________________________________________

				 _______________________________________________
				|						|
				|		Operações matemáticas		|
				|_______________________________________________|

 Também é possível realizar operações matemáticas com o python. É só digitar os valores, e o sinal da operação,
que será imprimido pelo console o resultado.

CONSOLE:
5+7
12

 Também pode-se usar o print para realizar a mesma tarefa:

CONSOLE:
print(5+7)
12

 Em python os operandos usados em operações matemáticas também são diferentes:

+ _ Adição		**_Potência
		
- _ Subtração		//_Divisão inteira
		
*_Multiplicação		%_Resto

/_Divisão		==_Igual á*
		
*Sim, os dois símbolos de '=' (igual), são referentes ao resultado de uma operação.

____________________________________________________________________________________

 _______________________________________
|					|
|	Sequência de operações		|
|_______________________________________|

 Em Python, há uma certa seuquência a ser seguida, caso haja uma expressão numérica.

1 - Os parentesis sempre devem ser resolvidos primeiro. {()}

2 - A potência deve ser resolvida em seguida. {**}

3 - Multiplicações, divisões, divisões inteiras e resto devem ser uma das penúltimas
coisas a serem resolvidas. {*,/,//,%}

4 - Somas e subtrações são as últimas a serem resolvidas. {+,-}
_________________________________________________________________________________________________________


{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{

############################################################################################################################

--Para fazer com que alguma informação do código se trone um comentário, é só adicionar o '#' (hash) no início
da linha do conteúdo.

--